*pack.txt*   Pack

                            PACK REFERENCE MANUAL

A package manager for neovim                                  *pack* *pack.nvim*

                                       Type |gO| to see the table of contents.

==============================================================================
USAGE                                                             *pack-usage*

In your init.lua, require the "pack" module with a list of packages, like: >lua
    require("pack").register({
        "saccarosium/pack.nvim",
        "neovim/nvim-lspconfig",
        { 'nvim-treesitter/nvim-treesitter', build = ':TSUpdate' },
    })

Then, source your configuration and run `:PackInstall`.

==============================================================================
API                                                                 *pack-api*

*pack.Opts*

    Fields: ~
      • {url_format}  (`string`, default: `https://github.com/%s.git`) Format
                      string used to transform the package name into a git
                      url.
      • {clone_args}  (`string[]`, default: `{ "--depth=1", "--recurse-submodules", "--shallow-submodules", "--no-single-branch" }`)
                      Flags passed to `git clone` during installation of a
                      plugin (see `:Man git-clone(1)` for more)
      • {pull_args}   (`string[]`, default: `{ "--tags", "--force", "--recurse-submodules", "--update-shallow" }`)
                      Flags passed to `git pull` during update of a plugin
                      (see `:Man git-pull(1)` for more)

*pack.Package*

    Fields: ~
      • {[1]}     (`string?`)
      • {name}    (`string?`)
      • {as}      (`string?`)
      • {branch}  (`string?`)
      • {dir}     (`string?`)
      • {status}  (`pack.Status?`)
      • {hash}    (`string?`)
      • {pin}     (`boolean?`)
      • {build}   (`string?|function?`)
      • {url}     (`string?`)


pack.clean()                                                    *pack.clean()*
    Deletes all not plugins installed but not registered in the pack
    directory.

    Can also be invoked with `PackClean`.                          *PackClean*

pack.config({opts})                                            *pack.config()*

    Parameters: ~
      • {opts}  (`pack.Opts?`) When omitted or `nil`, retrieve the current
                configuration. Otherwise, a configuration table (see
                |pack.Opts|).

    Return: ~
        (`pack.Opts?`) Current pack config if {opts} is omitted.

pack.install()                                                *pack.install()*
    Installs not already installed registered plugins

    Can also be invoked with `PackInstall`.                      *PackInstall*

pack.query({filter})                                            *pack.query()*
    Queries pack's packages storage with predefined filters by passing one of
    the following strings:
    • "installed"
    • "to_install"
    • "to_update"

    Parameters: ~
      • {filter}  (`string`)

pack.register({pkgs})                                        *pack.register()*
    Register one or more plugins to be installed (see *packspec*)

    Example: >lua
        pack.register({
          "saccarosium/pack.nvim",
          "neovim/nvim-lspconfig",
          { 'nvim-treesitter/nvim-treesitter', build = ':TSUpdate' },
        })
<

    Parameters: ~
      • {pkgs}  (`pack.Package[]`)

pack.sync()                                                      *pack.sync()*
    Does a clean, install and pull at the same time in this order.

    Can also be invoked with `PackSync`.                            *PackSync*

pack.update()                                                  *pack.update()*
    Updates all registered plugins

    Can also be invoked with `PackUpdate`.                        *PackUpdate*


 vim:tw=78:ts=8:sw=4:sts=4:et:ft=help:norl:
